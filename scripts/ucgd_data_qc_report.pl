#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;
use JSON;
use YAML;

use Arty::Utils qw(:all);
use Arty::alignstats;
use Arty::peddy;
use Arty::fastp;
use Arty::goleft;
use Arty::NextFlow_RunLogs;

#-----------------------------------------------------------------------------
#----------------------------------- MAIN ------------------------------------
#-----------------------------------------------------------------------------

my $usage = "

Synopsis:

ucgd_data_qc_reort.pl -i peddy -c qc_config.yaml $PROJECT-PATH/UCGD/GRCh38/Reports

Description:

This script will read all of the QC reports generated by the UCGD VAR
pipeline and generate a summary of important metrics that may have
failed a provided threshold or warrant further inspection.

Options:

  --ignore, -i fastp,bcftools_stats

    Don't process the given QC report type.  Valid values are:

      alignstats
      bcftools
      fastp
      goleft
      nextflow
      peddy

  --config, -c config.yaml

    A YAML formatted config file describing the metrics and thresholds
    to apply.

  --config_tmplt, -t

    Print a template copy of the config file to STDOUT.

";

my ($help, $ignore_txt, $config_file, $config_tmplt);
my $opt_success = GetOptions('help|h'           => \$help,
                             'ignore|i=s'       => \$ignore_txt,
                             'config|c=s'       => \$config_file,
                             'cnofig_tmplt|t=b' => \$config_tmplt,
    );

if (! defined $config_file && defined $ENV{UCGD_QC_CONFIG}) {
        $config_file = $ENV{UCGD_QC_CONFIG} . '/ucgd_qc_config.yaml';
}

if (! defined $config_file || ! -e $config_file) {
        die "$usage\n\nFATAL : invalid_or_missing_config_file : $config_file\n";
}

my $CONFIG = Load($config_file);

if (! -d $reports_path) {
        die "$usage\n\nFATAL : invalid_or_missing_reports_path : $reports_path\n";
}

my %ignore_types;
map {$ignore_types{$_}++} split /,/, $ignore_txt;

my ($reports_path) = @ARGV;

if (! -d $reports_path) {
        die "$usage\n\nFATAL : invalid_or_missing_reports_path : $reports_path\n";
}

my $data = {};

# Parse QC Reports

# alignstats
if (! defined $ignore_types{alignstats}) {
        parse_alignstats($qc_data, $reports_path);
}

# bcftools
if (! defined $ignore_types{bcftools}) {
        parse_bcftools($qc_data, $reports_path);
}

# goleft
if (! defined $ignore_types{goleft}) {
        parse_goleft($qc_data, $reports_path);
}

# nextflow
if (! defined $ignore_types{nextflow}) {
        parse_nextflow($qc_data, $reports_path);
}

# peddy
if (! defined $ignore_types{peddy}) {
        parse_peddy($qc_data, $reports_path);
}


#-----------------------------------------------------------------------------
#------------------------------- SUBROUTINES ---------------------------------
#-----------------------------------------------------------------------------

sub parse_alignstats {

        my ($qc_data, $reports_path) = @_;

        my $alignstats_file = "$reports_path/";

        my $report = Arty::alignstats->new(file => $alignstats_file);

        # Process alignstats QC report

}

#-----------------------------------------------------------------------------

sub parse_bcftools {

        my ($qc_data, $reports_path) = @_;

        my $bcftools_file = "$reports_path/";

        my $report = Arty::bcftools->new(file => $bcftools_file);

        # Process bcftools QC report

}

#-----------------------------------------------------------------------------

sub parse_fastp {

        my ($qc_data, $reports_path) = @_;

        my $fastp_file = "$reports_path/";

        my $report = Arty::fastp->new(file => $fastp_file);

        # Process fastp QC report

}

#-----------------------------------------------------------------------------

sub parse_goleft {

        my ($qc_data, $reports_path) = @_;

        my $goleft_file = "$reports_path/";

        my $report = Arty::goleft->new(file => $goleft_file);

        # Process goleft QC report

}

#-----------------------------------------------------------------------------

sub parse_nextflow {

        my ($qc_data, $reports_path) = @_;

        my $nextflow_file = "$reports_path/";

        my $report = Arty::nextflow->new(file => $nextflow_file);

        # Process nextflow QC report

}

#-----------------------------------------------------------------------------

sub parse_peddy {

        my ($qc_data, $reports_path) = @_;

        my $peddy_file = "$reports_path/";

        my $report = Arty::peddy->new(file => $peddy_file);

        # Process peddy QC report

}

